/*                                    __          __    __   _____
    |\/|  |  |\ |  |       | )  | )  |  |     |  |__   |       |
    |  |  |  | \|  |       |    | \  |__|  |__|  |__   |__     |     by  Bhavya Agarwal
*/
#include<iostream>
#include<fstream>
#include<cstdlib>
#include<cstring>
#include<conio.h>
using namespace std;

int snacksprice,maggiprice,softDrink_price;
int snacksqty,maggiqty,sdqty;
void billpage();
void empjump();
void billjump();
void handlecust();

// Creating store class 
class store {
    public:
        string item;
        string name;
        int amt;
        int ch;
        int rate;
        int qty=0;
        void mnginvt();
        void storepageswitch();
        void price();
        void viewinvt();
        void quantity();
        void storepage()
        {
            storepageswitch();
        }
};

// In store class providing option to the users to view inventory, manage inventory, take order and view the sale's records.
// With the help of switch cases
void store::storepageswitch() {
    system("CLS");
    cout << "\t\t\t\t\t\t\tWELCOME TO ARTCHIC CANTEEN\n";
    cout << "\t\t\t\t\t\t\t----------------------------" << endl << endl;
    cout <<"     PLEASE UPDATE THE PRICE AND QUANTITY OF" <<endl;
    cout <<"     ITEMS IN MANAGE INVENTORY BEFORE PROCEEDING" <<endl << endl;
    cout <<"     1. MANAGE INVENTORY" << endl;
    cout <<"     2. VIEW INVENTORY" << endl;
    cout <<"     3. TAKE ORDER" << endl;
    cout <<"     4. VIEW SALES RECORD" << endl;
    cout <<"     5. EXIT" << endl << endl;
    cout <<"     ENTER CHOICE" << endl;
    cout <<"     ";
    cin >> ch;
    while(ch!=1||ch!=2||ch!=3) {
        switch(ch) {
            case 1:
                mnginvt();
                break;
            case 2:
                viewinvt();
                break;
            case 3:
                handlecust();
                break;
            case 4:
                billjump();
                break;
            case 5:
                exit(0);
            default:
                cout<<endl<<"     INVALID CHOICE"<<endl<<endl;
                cout<<"     ENTER CHOICE"<<endl<<endl;
                cout<<"     ";cin>>ch;
        }
    }
}

// In store class user editing price and quantity in managing inventory function.
// With the help of switch cases.
void store::mnginvt() {
    system("CLS");
    cout<<"\t\t\t\t\t\t\tWELCOME TO ARTCHIC CANTEEN\n";
    cout<<"\t\t\t\t\t\t\t----------------------------"<<endl<<endl;
    cout<<"     1. EDIT PRICE"<<endl;
    cout<<"     2. ENTER QUANTITY"<<endl<<endl;
    cout<<"     ENTER CHOICE"<<endl;
    cout<<"     ";cin>>ch;
    while(ch!=1||ch!=2) {
        switch(ch) {
            case 1:
                price();
                break;
            case 2:
                quantity();
                break;
            default:
                cout<<endl<<"     INVALID CHOICE"<<endl<<endl;
                cout<<"     ENTER CHOICE"<<endl<<endl;
                cout<<"     ";cin>>ch;
        }
    }
}

// In store class user creating file of name price using file handling to keep the record safe.
// In price file storing the price of items like snacks, maggi and soft drink.
void store::price() {
    system("CLS");
    cout<<"\t\t\t\t\t\t\tWELCOME TO ARTCHIC CANTEEN\n";
    cout<<"\t\t\t\t\t\t\t----------------------------"<<endl<<endl;
    cout<<"     CURRENT INVENTORY"<<endl;
    ifstream currprice("PRICE.txt");
    cout<<"     "<<"ITEM"<<" - "<<"PRICE"<<endl;
    cout<<"     ------------" << endl;
    while(currprice>>item>>rate) {
        cout << "     " << item << " - " << rate << endl;
    }
    currprice.close();
    remove("PRICE.txt");
    fstream editprice("PRICE.txt",ios::app); // Updating price of item in inventory.
    cout << endl << "     ENTER PRICE OF SNACKS" << endl;
    cout << "     ";
    cin >> snacksprice;cout << endl;
    editprice << "SNACKS" << ' ' << snacksprice << endl;
    cout<<"     ENTER PRICE OF MAGGI" << endl;
    cout<<"     ";cin>>maggiprice;
    editprice<<"MAGGI"<<' '<<maggiprice<<endl;
    cout<<"     ENTER PRICE OF SOFT DRINK"<<endl;
    cout<<"     ";cin>>softDrink_price;
    editprice<<"SOFTDRINK"<<' '<<softDrink_price<<endl;;
    editprice.close();

    system("CLS");
    cout<<"\t\t\t\t\t\t\tWELCOME TO ARTCHIC CANTEEN\n";
    cout<<"\t\t\t\t\t\t\t----------------------------"<<endl<<endl;
    cout<<"     NEW INVENTORY"<<endl;
    ifstream viewprice("PRICE.txt"); // In price file updated price of item and created a new price list of item in inventory.
    cout<<"     "<<"ITEM"<<" - "<<"PRICE"<<endl;
    cout<<"     ------------"<<endl;
    while(viewprice>>item>>rate) {
        cout<<"     "<<item<<" - "<<rate<<endl;
    }
    viewprice.close();
    cout<<endl<<"     PRESS ANY KEY TO CONTINUE"<<endl;
    cout<<"     ";getch();
    storepage();
}

// In store class in inventory user editing, vewing and adding number of item in quantity file using file handling.
void store::quantity() {
    system("CLS");
    cout<<"\t\t\t\t\t\t\tWELCOME TO ARTCHIC CANTEEN\n";
    cout<<"\t\t\t\t\t\t\t----------------------------"<<endl<<endl;
    cout<<"     CURRENT INVENTORY"<<endl;
    ifstream currqty("QUANTITY.txt");
    cout<<"     "<<"ITEM"<<" - "<<"QUANTITY"<<endl;
    cout<<"     ---------------"<<endl;
    while(currqty>>item>>qty) {
        cout<<"     "<<item<<" - "<<qty<<endl;
    }
    currqty.close();
    remove("QUANTITY.txt");
    fstream editqty("QUANTITY.txt",ios::app); // Updating the quantity of items in inventory.
    cout<<endl<<"     ENTER QUANTITY OF SNACKS"<<endl;
    cout<<"     ";cin>>snacksqty;
    editqty<<"SNACKS"<<' '<<snacksqty<<endl;
    cout<<"     ENTER QUANTITY OF MAGGI"<<endl;
    cout<<"     ";cin>>maggiqty;
    editqty<<"MAGGI"<<' '<<maggiqty<<endl;
    cout<<"     ENTER QUANTITY OP SOFT DRINK"<<endl;
    cout<<"     ";cin>>sdqty;
    editqty<<"SOFTDRINK"<<' '<<sdqty<<endl;
    editqty.close();
    system("CLS");
    cout<<"\t\t\t\t\t\t\tWELCOME TO ARTCHIC CANTEEN\n";
    cout<<"\t\t\t\t\t\t\t----------------------------"<<endl<<endl;
    cout<<"     NEW INVENTORY"<<endl;
    cout<<"     "<<"ITEM"<<" - "<<"QUANTITY"<<endl;
    cout<<"     --------------------"<<endl;
    ifstream viewqty("QUANTITY.txt"); // Created the updated list item in inventory.
    while(viewqty>>item>>qty) {
        cout<<"     ";cout<<item<<" - "<<qty<<endl;
    }
    viewqty.close();
    cout<<endl<<"     PRESS ANY KEY TO CONTINUE"<<endl;
    cout<<"     ";getch();
    storepage();
}

// In store class user checking the inventry files i.e. price file and quantity file.
void store::viewinvt() {
    system("CLS");
    cout<<"\t\t\t\t\t\t\tWELCOME TO ARTCHIC CANTEEN\n";
    cout<<"\t\t\t\t\t\t\t----------------------------"<<endl<<endl;
    cout<<"     PRICE OF ITEMS IN CANTEEN"<<endl;
    cout<<"     ITEM - PRICE"<<endl;
    cout<<"     ------------"<<endl;
    ifstream vwpr("PRICE.txt");
    while(vwpr>>item>>rate) {
        cout<<"     ";cout<<item<<" - "<<rate<<endl;
    }
    vwpr.close();
    cout<<endl<<"     QUANTITY OF ITEMS IN CANTEEN"<<endl;
    cout<<"     ITEM - QUANTITY"<<endl;
    cout<<"     ---------------"<<endl;
    ifstream vwqt("QUANTITY.txt");
    while(vwqt>>item>>rate) {
        cout<<"     ";cout<<item<<" - "<<rate<<endl;
    }
    vwqt.close();
    cout<<endl<<"     PRESS ANY KEY TO CONTINUE"<<endl;
    cout<<"     ";getch();
    storepage();
}

// Creating billing class
// In this class editing, viewing and clearing the previous bill record
class billing {
    public:
        string name;
        int cost1,cost2,cost3,qty,totalcost;
        store s;
        int amt;
        char dec;
        void viewstat();
        void clearstat();
        billing() {
            cost1=0;
            cost2=0;
            cost3=0;
        }
        void bill1(int qty) {
            cost1=0;
            cost1=snacksprice*qty;
        }
        void bill2(int qty) {
            cost2=0;
            cost2=maggiprice*qty;
        }
        void bill3(int qty) {
            cost3=0;
            cost3=softDrink_price*qty;
        }
        // Creating the bill 
        void bill() {
            system("CLS");
            cout<<"\t\t\t\t\t\t\tWELCOME TO ARTCHIC CANTEEN\n";
            cout<<"\t\t\t\t\t\t\t----------------------------"<<endl<<endl;
            totalcost=cost1+cost2+cost3;
            cout<<"     ENTER NAME OF CUSTOMER"<<endl;
            cout<<"     ";cin>>name;
            system("CLS");
            cout<<"\t\t\t\t\t\t\tWELCOME TO ARTCHIC CANTEEN\n";
            cout<<"\t\t\t\t\t\t\t----------------------------"<<endl<<endl;
            cout<<"     BILL : PAY FOLLOWING AMOUNT "<<endl;
            cout<<"     CUSTOMER NAME : "<<name<<endl;
            cout<<"     TOTAL COST IS : "<<"Rs. "<<totalcost<<endl;;
            cout<<"     THANK YOU FOR COMING"<<endl;
            fstream billmod("SALESRECORD.txt",ios::app); // Owner storing the sales record in file.
            billmod<<name<<' '<<totalcost<<endl;
            billmod.close();
            cout<<endl<<"     PRESS ANY KEY TO CONTINUE"<<endl;
            cout<<"     ";getch();
            billpage();
        }
};

// Analysing the sale records.
void billing::viewstat() {
    system("CLS");
    cout<<"\t\t\t\t\t\t\tWELCOME TO ARTCHIC CANTEEN\n";
    cout<<"\t\t\t\t\t\t\t----------------------------"<<endl<<endl;
    ifstream viewsr("SALESRECORD.txt");
    cout<<"     NAME - AMOUNT"<<endl;
    cout<<"     -------------"<<endl;
    while(viewsr>>name>>amt) {
        cout<<"     "<<name<<" - "<<"Rs. "<<amt<<endl;
    }
    viewsr.close();
    cout<<endl<<"     PRESS ANY KEY TO CONTINUE"<<endl;
    cout<<"     ";getch();
    s.storepage();
}

// Deleting the unwanted record from the sales record.
void billing::clearstat() {
    system("CLS");
    cout<<"\t\t\t\t\t\t\tWELCOME TO ARTCHIC CANTEEN\n";
    cout<<"\t\t\t\t\t\t\t----------------------------"<<endl<<endl;
    cout<<"     CLEAR SALES RECORD [Y]"<<endl;
    cout<<"     ";cin>>dec;
    if(dec=='Y') { // Deleting the unwanted salesrecord and employee files.
        remove("SALESRECORD.txt");
        cout<<endl<<"     SALES RECORD CLEARED"<<endl;
        cout<<endl<<"     PRESS ANY KEY TO CONTINUE"<<endl;
        cout<<"     ";getch();
        remove("EMPLOYEE.txt");
        ifstream newsr("EMPLOYEE.txt");
        newsr.close();
        empjump();
    }
    else {
        cout<<endl<<"     SALES RECORD ARE NOT CLEARED"<<endl;
        cout<<endl<<"     PRESS ANY KEY TO CONTINUE"<<endl;
        cout<<"     ";getch();
        empjump();

    }
}

// Creating the order class.
class order {
    public:
        int tqty;
        string titem;
        billing b;
        int invtqty;
        string invtitem;
        char dec;
        int ch;
        int qty;
        void orderitem1();
        void orderitem2();
        void orderitem3();
        void orderpageswitch();
        void orderpage() { // Creating the menu. 
            system("CLS");
            cout<<"\t\t\t\t\t\t\tWELCOME TO ARTCHIC CANTEEN\n";
            cout<<"\t\t\t\t\t\t\t----------------------------"<<endl<<endl;
            cout<<"\t\t\t\t\t\t\t*Serving happiness with essence of love*"<<endl<<endl;

            cout<<"     1. SNACKS"<<endl;
            cout<<"     2. MAGGI"<<endl;
            cout<<"     3. SOFT DRINK"<<endl;
            cout<<"     4. EXIT"<<endl<<endl;
            cout<<"     ENTER ITEM TO ORDER"<<endl;
            cout<<"     ";cin>>ch;
            orderpageswitch();
        }
};

// Taking the order.
void order::orderpageswitch() {
    while(ch!=1||ch!=2||ch!=3||ch!=4) {
        switch(ch) {
            case 1:
                orderitem1();
                break;
            case 2:
                orderitem2();
                break;
            case 3:
                orderitem3();
                break;
            case 4:
                exit(0);
                break;
            default:
                cout<<endl<<"     INVALID CHOICE"<<endl;
                cout<<"     ENTER CHOICE"<<endl;
                cout<<"     ";cin>>ch;
        }
    }
}

// Taking the order quantity first item from the menu i.e. snacks.
void order::orderitem1() {
    cout<<"     ENTER QUANTITY"<<endl;
    cout<<"     ";cin>>qty;
    // Checking the quantity of snacks in inventory.
    if(snacksqty>=qty) {
        snacksqty=snacksqty-qty;
        ofstream temp1("temp1.txt");  
        ifstream snackorder("QUANTITY.txt");
        while(snackorder>>titem>>tqty) {
            if(titem!="SNACKS") {
                temp1<<titem<<' '<<tqty<<endl;
            }
            else {
                temp1<<"SNACKS"<<' '<<snacksqty<<endl;
            }
        }
        temp1.close();
        snackorder.close();
        remove("QUANTITY.TXT");
        rename("temp1.txt","QUANTITY.txt"); 
        b.bill1(qty);
        cout<<"     ORDER ANOTHER ITEM [Y]"<<endl; // Updating the orders.
        cout<<"     ";cin>>dec;
        if(dec=='Y') {
            orderpage();
        }
        else {
            b.bill();
        }
    }
    else {
        cout<<endl<<"     NOT AVAILABLE"<<endl;
        cout<<"     SELECT ANOTHER ITEM"<<endl;
        cout<<endl<<"     PRESS ANY KEY TO CONTINUE"<<endl;
        cout<<"     ";getch();
        system("CLS");
        cout<<"\t\t\t\t\t\t\tWELCOME TO ARTCHIC CANTEEN\n";
        cout<<"\t\t\t\t\t\t\t----------------------------"<<endl<<endl;
        ifstream orderout("QUANTITY.txt"); // Checking the remaining quantity of snacks in inventory after the orders. 
        cout<<"     ITEM - QUANTITY"<<endl;
        cout<<"     ---------------"<<endl;
        while(orderout>>invtitem>>invtqty) {
            cout<<"     "<<invtitem<<" - "<<invtqty<<endl;
        }
        orderout.close();
        cout<<endl<<"     PRESS ANY KEY FOR NEW ORDER"<<endl;
        cout<<"     ";getch();
        orderpage();
    }
}

// Taking the order of second item from the menu i.e. Maggi.
void order::orderitem2() {
    cout<<"     ENTER QUANTITY"<<endl;
    cout<<"     ";cin>>qty;
    // Checking the quantity of maggi in the inventory.
    if(maggiqty>=qty) {
        maggiqty=maggiqty-qty;
        ofstream temp2("temp2.txt");
        ifstream maggiorder("QUANTITY.txt");
        while(maggiorder>>titem>>tqty) {
            if(titem!="MAGGI") {
                temp2<<titem<<' '<<tqty<<endl;
            }
            else {
                temp2<<"MAGGI"<<' '<<maggiqty<<endl;
            }
        }
        temp2.close();
        maggiorder.close();
        remove("QUANTITY.TXT");
        rename("temp2.txt","QUANTITY.txt");
        b.bill2(qty);
        cout<<"     ORDER ANOTHER ITEM [Y]"<<endl; // Updating the order.
        cout<<"     ";cin>>dec;
        if(dec=='Y') {
            orderpage();
        }
        else {
            b.bill();
        }
    }
    else {
        cout<<endl<<"     NOT AVAILABLE"<<endl;
        cout<<"     SELECT ANOTHER ITEM"<<endl;
        cout<<endl<<"     PRESS ANY KEY TO CONTINUE"<<endl;
        cout<<"     ";getch();
        system("CLS");
        cout<<"\t\t\t\t\t\t\tWELCOME TO ARTCHIC CANTEEN\n";
        cout<<"\t\t\t\t\t\t\t----------------------------"<<endl<<endl;
        ifstream orderout("QUANTITY.txt"); // Checking the remaining quantity of maggi after the order.
        cout<<"     ITEM - QUANTITY"<<endl;
        cout<<"     ---------------"<<endl;
        while(orderout>>invtitem>>invtqty) {
            cout<<"     "<<invtitem<<" - "<<invtqty<<endl;
        }
        orderout.close();
        cout<<endl<<"     PRESS ANY KEY FOR NEW ORDER"<<endl;
        cout<<"     ";getch();
        orderpage();
    }
}

// Taking the order of third item i.e. soft drink
void order::orderitem3() {
    cout<<"     ENTER QUANTITY"<<endl;
    cout<<"     ";cin>>qty;
    // Checking  the quantity of soft drinks in the inventory.
    if(sdqty>=qty) {
        sdqty=sdqty-qty;
        ofstream temp3("temp3.txt");
        ifstream sdorder("QUANTITY.txt");
        while(sdorder>>titem>>tqty) {
            if(titem!="SOFTDRINK") {
                temp3<<titem<<' '<<tqty<<endl;
            }
            else {
                temp3<<"SOFTDRINK"<<' '<<sdqty<<endl;
            }
        }
        temp3.close();
        sdorder.close();
        remove("QUANTITY.TXT");
        rename("temp3.txt","QUANTITY.txt");
        b.bill3(qty);
        cout<<"     ORDER ANOTHER ITEM [Y]"<<endl; // Upadating the order.
        cout<<"     ";cin>>dec;
        if(dec=='Y') {
            orderpage();
        }
        else {
            b.bill();
        }
    }
    else {
        cout<<endl<<"     NOT AVIALABLE"<<endl;
        cout<<"     SELECT ANOTHER ITEM"<<endl;
        cout<<endl<<"     PRESS ANY KEY TO CONTINUE"<<endl;
        cout<<"     ";getch();
        system("CLS");
        cout<<"\t\t\t\t\t\t\tWELCOME TO ARTCHIC CANTEEN\n";
        cout<<"\t\t\t\t\t\t\t----------------------------"<<endl<<endl;
        ifstream orderout("QUANTITY.txt"); // Checking the remaining quantity of soft drinks after the order.
        cout<<"     ITEM - QUANTITY"<<endl;
        cout<<"     ---------------"<<endl;
        while(orderout>>invtitem>>invtqty) {
            cout<<"     "<<invtitem<<" - "<<invtqty<<endl;
        }
        orderout.close();
        cout<<endl<<"     PRESS ANY KEY FOR NEW ORDER"<<endl;
        cout<<"     ";getch();
        orderpage();
    }
}

// Creating the employee class.
class employee {
    public:
        int ch,age;
        char name[50];
        long int sal;
        void addemp();
        void displayemp();
        void removeemp();
        void editemp();
        void emppageswitch();
        // Details of employee and salerecord.
        void emppage() {
            system("CLS");
            cout<<"\t\t\t\t\t\t\tWELCOME TO ARTCHIC CANTEEN\n";
            cout<<"\t\t\t\t\t\t\t----------------------------"<<endl<<endl;
            cout<<"     1. DISPLAY ALL EMPLOYEE DETAILS"<<endl;
            cout<<"     2. ADD NEW EMPLOYEE DETAILS"<<endl;
            cout<<"     3. REMOVE OLD EMPLOYEE DETAILS"<<endl;
            cout<<"     4. VIEW SALES RECORD"<<endl;
            cout<<"     5. CLEAR SALES RECORD"<<endl;
            cout<<"     6. STOREPAGE"<<endl;
            cout<<"     7. EXIT"<<endl<<endl;
            cout<<"     ENTER CHOICE"<<endl;
            cout<<"     ";cin>>ch;
            emppageswitch();
        }
};

// In employee class giving the option to the users to get the all details regarding the store, employee and bills. 
void employee::emppageswitch() {
    while(ch!=1||ch!=2||ch!=3||ch!=4||ch!=5) {
        switch(ch) {
            case 1:
                displayemp();
                break;
            case 2:
                addemp();
                break;
            case 3:
                removeemp();
                break;
            case 4: 
                {
                    billing b1;
                    b1.viewstat();
                }
                break;
            case 5:
                {
                    billing b2;
                    b2.clearstat();
                }
            case 6:
                {
                    store s;
                    s.storepage();
                }
                break;
            case 7:
                exit(0);
                break;
            default:
                cout<<endl<<"     INVALID CHOICE"<<endl;
                cout<<"     ENTER CHOICE"<<endl;
                cout<<"     ";cin>>ch;
        }
    }
}

// Adding the new employee in the Penguin's Canteen 
void employee::addemp() {
    system("CLS");
    cout<<"\t\t\t\t\t\t\tWELCOME TO ARTCHIC CANTEEN\n";
    cout<<"\t\t\t\t\t\t\t----------------------------"<<endl<<endl;

    // Creating a file for storing the basic details employee. 
    ofstream newemployee("EMPLOYEE.txt",ios::app);
    cout<<"     ENTER NAME OF EMPLOYEE"<<endl;
    cout<<"     ";cin>>name;
    cin.sync();
    cout<<"     ENTER AGE OF EMPLOYEE"<<endl;
    cout<<"     ";cin>>age;
    cout<<"     ENTER SALARY OF EMPLOYEE"<<endl;
    cout<<"     ";cin>>sal;
    newemployee<<name<<' '<<age<<' '<<sal<<endl;
    newemployee.close();
    cout<<endl<<"     EMPLOYEE ADDED"<<endl;
    cout<<endl<<"     PRESS ANY KEY TO CONTINUE";
    cout<<"     ";getch();
    emppage();
}

// List of employee.
void employee::displayemp() {
    system("CLS");
    cout<<"\t\t\t\t\t\t\tWELCOME TO ARTCHIC CANTEEN\n";
    cout<<"\t\t\t\t\t\t\t----------------------------"<<endl<<endl;
    ifstream employee("EMPLOYEE.txt");
    cout<<"     EMPLOYEE - AGE - SALARY"<<endl;
    cout<<"     -----------------------"<<endl;
    while (employee>>name>>age>>sal) {
        cout<<"     "<<name<<" - "<<age<<" - "<<sal<<endl ;
    }
    employee.close();
    cout<<endl<<"     PRESS ANY KEY TO CONTINUE"<<endl;
    cout<<"     ";getch();
    emppage();
}

// Deleating the left or ex-employee details.
void employee::removeemp() {
    system("CLS");
    cout<<"\t\t\t\t\t\t\tWELCOME TO ARTCHIC CANTEEN\n";
    cout<<"\t\t\t\t\t\t\t----------------------------"<<endl<<endl;
    char tname[50];
    ifstream emp1("EMPLOYEE.txt");
    ofstream emp2("temp.txt");
    cout<<"     ENTER THE NAME OF EMPLOYEE WISH TO REMOVE"<<endl;
    cout<<"     ";cin>>tname;
    while(emp1>>name>>age>>sal) {
        if(strcmp(name,tname)!=0) {
            emp2<<name<<' '<<age<<' '<<sal<<endl;
        }
    }
    emp1.close();
    emp2.close();
    remove("EMPLOYEE.txt");
    rename("temp.txt","EMPLOYEE.txt");
    cout<<endl<<"     EMPLOYEE REMOVED"<<endl;
    cout<<endl<<"     PRESS ANY KEY TO CONTINUE"<<endl;
    cout<<"     ";getch();
    emppage();
}

// Creating the login class to enter the Penguin's Canteen Management System. 
class login {
  public:
        string pass="";
        int ch;
        char c;
        void loginpageswitch();
        void homepageswitch();
        void employeelogin();
        void ownerlogin();
        void emp();
        void own();

        // In homwpage function creating the login and exit choice for further task.
        void homepage() {
            system("CLS"); 
            cout<<"\t\t\t\t\t\t\tWELCOME TO ARTCHIC CANTEEN\n";
            cout<<"\t\t\t\t\t\t\t--------------------------"<<endl<<endl;
            cout<<"     1. LOGIN"<<endl;
            cout<<"     2. EXIT"<<endl<<endl;
            cout<<"     ENTER CHOICE"<<endl;
            cout<<"     ";cin>>ch;
            homepageswitch();
        }

        // In this function users have a choice login as a admin or a employee.
        void loginpage() {
            system("CLS");
            cout<<"\t\t\t\t\t\t\tWELCOME TO ARTCHIC CANTEEN\n";
            cout<<"\t\t\t\t\t\t\t----------------------------"<<endl<<endl;
            cout<<"     1. OWNER LOGIN"<<endl;
            cout<<"     2. EMPLOYEE LOGIN"<<endl;
            cout<<"     3. EXIT"<<endl<<endl;
            cout<<"     ENTER CHOICE"<<endl;
            cout<<"     ";cin>>ch;
            loginpageswitch();
        }
};

// On the home page user have choice to login the system or exit form the system.
void login::homepageswitch() {
    while(ch!=1||ch!=2) {
        switch(ch) {
        case 1:
            loginpage();
            break;
        case 2:
            exit(0);
            break;
        default:
            cout<<endl<<"     INVALID CHOICE"<<endl;
            cout<<"     ENTER CHOICE"<<endl;
            cout<<"     ";cin>>ch;
        }
    }
}

// In this function users have a choice to login the system as a admin or as a employee or simply wants to exits from the system.
void login::loginpageswitch() {
    while(ch!=1||ch!=2||ch!=3) {
        switch(ch) {
            case 1:
                ownerlogin();
                break;
            case 2:
                employeelogin();
                break;
            case 3:
                exit(0);
                break;
            default:
                cout<<endl<<"     INVALID CHOICE"<<endl;
                cout<<"     ENTER CHOICE"<<endl;
                cout<<"     ";cin>>ch;
        }
    }
}

// In this function users login the system as admin.
void login::ownerlogin() {
        pass="";
        cout<<endl<<"     ENTER OWNER PASSWORD"<<endl;
        cout<<"     ";c=_getch();
        while(c!=13) {
            pass.push_back(c);
            cout<<"*";
            c=getch();
        }
        // Users have to provide the passwords to login the system as a admin.
        if(pass=="admin") {
            cout<<endl<<"     OWNER ACCESS GRANTED"<<endl;
            cout<<endl<<"     PRESS ANY KEY TO CONTINUE"<<endl;
            cout<<"     ";getch();
            own();
        }
        else {
            cout<<endl<<"     INVALID PASSWORD"<<endl;
        }
}

// In this function users login the system as a employee.
void login::employeelogin() {
        pass="";
        cout<<"     ENTER EMPLOYEE PASSWORD"<<endl;
        cout<<"     ";c=_getch();
        while(c!=13) {
            pass.push_back(c);
            cout<<"*";
            c=getch();
        }
        // Users have to provide the passwords to login the system as a employee.
        if(pass=="employee") {
            cout<<endl<<"     EMPLOYEE ACCESS GRANTED"<<endl;
            cout<<endl<<"     PRESS ANY KEY TO CONTINUE"<<endl;
            cout<<"     ";getch();
            emp();
        }
        else {
            cout<<endl<<"     INVALID PASSSWORD"<<endl;
        }
}

void login::emp() {
    store s;
    s.storepage();
}

void login::own() {
    employee e;
    e.emppage();
}

void billpage() {
    int ch;
    system("CLS");
    cout<<"\t\t\t\t\t\t\tWELCOME TO ARTCHIC CANTEEN\n";
    cout<<"\t\t\t\t\t\t\t----------------------------"<<endl<<endl;
    cout<<"     1. NEW ORDER"<<endl;
    cout<<"     2. EXIT"<<endl<<endl;
    cout<<"     ENTER CHOICE"<<endl;
    cout<<"     ";cin>>ch;
    while(ch!=1||ch!=2) {
        switch(ch) {
            case 1:
                {
                    order o;
                    o.orderpage();
                }
                break;
            case 2:
                exit(0);
                break;
            default:
                cout<<endl<<"     INVALID CHOICE"<<endl;
                cout<<"     ENTER CHOICE"<<endl;
                cout<<"     ";cin>>ch;
        }
    }
}

void handlecust() {
    order o;
    o.orderpage();
}

void billjump() {
    billing b;
    b.viewstat();
}

void empjump() {
    employee e;
    e.emppage();
}

int main() 
{
    cout<<"\t\t\t\t\t\t WELCOME TO ARTCHIC CANTEEN\n";

    // System has basic color options to enhance the ouput console.
    // Form that colors options I have selected two colors white for background of console and balck for the text on the console. 
    system("color B0"); // "B" represents the light aqua color and "0" represents the balck color. 

    login bh;
    bh.homepage();
    return 0;
}
